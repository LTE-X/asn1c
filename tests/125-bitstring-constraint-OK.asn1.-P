
/*** <<< INCLUDES [T] >>> ***/

#include <BIT_STRING.h>

/*** <<< DEPS [T] >>> ***/

typedef enum T {
	T_flag1	= 0,
	T_flag2	= 1,
	T_flag3	= 2
} e_T;

/*** <<< TYPE-DECLS [T] >>> ***/

typedef BIT_STRING_t	 T_t;

/*** <<< FUNC-DECLS [T] >>> ***/


extern asn_TYPE_descriptor_t asn_DEF_T;
asn_struct_free_f T_free;
#if (ASN_OP_MASK & ASN_OP_PRINT)
asn_struct_print_f T_print;
#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
#if (ASN_OP_MASK & ASN_OP_CHECK)
asn_constr_check_f T_constraint;
#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
#if (ASN_OP_MASK & ASN_OP_BER_DER)
ber_type_decoder_f T_decode_ber;
der_type_encoder_f T_encode_der;
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
#if (ASN_OP_MASK & ASN_OP_XER)
xer_type_decoder_f T_decode_xer;
xer_type_encoder_f T_encode_xer;
#endif /* (ASN_OP_MASK & ASN_OP_XER) */

/*** <<< CODE [T] >>> ***/

#if (ASN_OP_MASK & ASN_OP_CHECK)
int
T_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const BIT_STRING_t *st = (const BIT_STRING_t *)sptr;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	/* Replace with underlying type checker */
	td->check_constraints = asn_DEF_BIT_STRING.check_constraints;
	return td->check_constraints(td, sptr, ctfailcb, app_key);
}

#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
/*
 * This type is implemented using BIT_STRING,
 * so here we adjust the DEF accordingly.
 */

/*** <<< STAT-DEFS [T] >>> ***/


#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_T_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (3 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

asn_TYPE_descriptor_t asn_DEF_T = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"T",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"T",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_BIT_STRING,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	T_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_T_tags_1,
	sizeof(asn_DEF_T_tags_1)
		/sizeof(asn_DEF_T_tags_1[0]), /* 1 */
	asn_DEF_T_tags_1,	/* Same as above */
	sizeof(asn_DEF_T_tags_1)
		/sizeof(asn_DEF_T_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	0, 0,	/* Defined elsewhere */
	&asn_SPC_BIT_STRING_specs	/* Additional specs */
};

