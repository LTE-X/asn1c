
/*** <<< INCLUDES [Forest] >>> ***/

#include <asn_SET_OF.h>
#include <constr_SET_OF.h>

/*** <<< FWD-DECLS [Forest] >>> ***/

struct Tree;

/*** <<< TYPE-DECLS [Forest] >>> ***/

typedef struct Forest {
	A_SET_OF(struct Tree) list;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Forest_t;

/*** <<< FUNC-DECLS [Forest] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Forest;
extern asn_SET_OF_specifics_t asn_SPC_Forest_specs_1;
extern asn_TYPE_member_t asn_MBR_Forest_1[1];

/*** <<< POST-INCLUDE [Forest] >>> ***/

#include "Tree.h"

/*** <<< STAT-DEFS [Forest] >>> ***/

asn_TYPE_member_t asn_MBR_Forest_1[] = {
	{ ATF_POINTER, 0, 0,
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_Tree,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = ""
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Forest_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
asn_SET_OF_specifics_t asn_SPC_Forest_specs_1 = {
	sizeof(struct Forest),
	offsetof(struct Forest, _asn_ctx),
	#if (ASN_OP_MASK & ASN_OP_XER)
	0,	/* XER encoding is XMLDelimitedItemList */
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
};

asn_TYPE_descriptor_t asn_DEF_Forest = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Forest",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Forest",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SET_OF,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SET_OF_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Forest_tags_1,
	sizeof(asn_DEF_Forest_tags_1)
		/sizeof(asn_DEF_Forest_tags_1[0]), /* 1 */
	asn_DEF_Forest_tags_1,	/* Same as above */
	sizeof(asn_DEF_Forest_tags_1)
		/sizeof(asn_DEF_Forest_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Forest_1,
	1,	/* Single element */
	&asn_SPC_Forest_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [Tree] >>> ***/

#include <INTEGER.h>
#include <constr_SEQUENCE.h>

/*** <<< TYPE-DECLS [Tree] >>> ***/

typedef struct Tree {
	INTEGER_t	 height;
	INTEGER_t	 width;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Tree_t;

/*** <<< FUNC-DECLS [Tree] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Tree;
extern asn_SEQUENCE_specifics_t asn_SPC_Tree_specs_1;
extern asn_TYPE_member_t asn_MBR_Tree_1[2];

/*** <<< STAT-DEFS [Tree] >>> ***/

asn_TYPE_member_t asn_MBR_Tree_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Tree, height),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_INTEGER,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "height"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Tree, width),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_INTEGER,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "width"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Tree_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_Tree_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 1 }, /* height */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 1, -1, 0 } /* width */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */

asn_SEQUENCE_specifics_t asn_SPC_Tree_specs_1 = {
	sizeof(struct Tree),
	#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
	offsetof(struct Tree, _asn_ctx),
	#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_MAP_Tree_tag2el_1,
	2,	/* Count of tags in the map */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0, 0, 0,	/* Optional elements (not needed) */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	-1,	/* Start extensions */
	-1	/* Stop extensions */
};

asn_TYPE_descriptor_t asn_DEF_Tree = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Tree",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Tree",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SEQUENCE,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SEQUENCE_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Tree_tags_1,
	sizeof(asn_DEF_Tree_tags_1)
		/sizeof(asn_DEF_Tree_tags_1[0]), /* 1 */
	asn_DEF_Tree_tags_1,	/* Same as above */
	sizeof(asn_DEF_Tree_tags_1)
		/sizeof(asn_DEF_Tree_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Tree_1,
	2,	/* Elements count */
	&asn_SPC_Tree_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [Stuff] >>> ***/

#include <asn_SET_OF.h>
#include <constr_SET_OF.h>
#include <BIT_STRING.h>
#include <constr_SEQUENCE.h>
#include <INTEGER.h>
#include <constr_CHOICE.h>
#include <constr_SET.h>

/*** <<< DEPS [Stuff] >>> ***/


/*
 * Method of determining the components presence
 */
typedef enum Stuff_PR {
	Stuff_PR_trees,	/* Member trees is present */
	Stuff_PR_anything,	/* Member anything is present */
	Stuff_PR_other,	/* Member other is present */
} Stuff_PR;
typedef enum other_PR {
	other_PR_NOTHING,	/* No components present */
	other_PR_a,
	other_PR_b
} other_PR;

/*** <<< FWD-DECLS [Stuff] >>> ***/

struct Forest;

/*** <<< FWD-DEFS [Stuff] >>> ***/

typedef struct Member {
	BIT_STRING_t	 cup_of_coffee;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Member;

/*** <<< TYPE-DECLS [Stuff] >>> ***/

typedef struct Stuff {
	struct trees {
		A_SET_OF(struct Forest) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *trees;
	struct anything {
		A_SET_OF(Member) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *anything;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	struct other {
		other_PR present;
		union Stuff__other_u {
			INTEGER_t	 a;
			INTEGER_t	 b;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *other;
	
	/* Presence bitmask: ASN_SET_ISPRESENT(pStuff, Stuff_PR_x) */
	unsigned int _presence_map
		[((3+(8*sizeof(unsigned int))-1)/(8*sizeof(unsigned int)))];
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Stuff_t;

/*** <<< FUNC-DECLS [Stuff] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Stuff;

/*** <<< POST-INCLUDE [Stuff] >>> ***/

#include "Forest.h"

/*** <<< STAT-DEFS [Stuff] >>> ***/

static asn_TYPE_member_t asn_MBR_trees_2[] = {
	{ ATF_POINTER, 0, 0,
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_Forest,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = ""
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_trees_tags_2[] = {
	(ASN_TAG_CLASS_CONTEXT | (1 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
static asn_SET_OF_specifics_t asn_SPC_trees_specs_2 = {
	sizeof(struct trees),
	offsetof(struct trees, _asn_ctx),
	#if (ASN_OP_MASK & ASN_OP_XER)
	0,	/* XER encoding is XMLDelimitedItemList */
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
};

static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_trees_2 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"trees",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"trees",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SET_OF,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SET_OF_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_trees_tags_2,
	sizeof(asn_DEF_trees_tags_2)
		/sizeof(asn_DEF_trees_tags_2[0]) - 1, /* 1 */
	asn_DEF_trees_tags_2,	/* Same as above */
	sizeof(asn_DEF_trees_tags_2)
		/sizeof(asn_DEF_trees_tags_2[0]), /* 2 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_trees_2,
	1,	/* Single element */
	&asn_SPC_trees_specs_2	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_Member_5[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Member, cup_of_coffee),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (3 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_BIT_STRING,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "cup-of-coffee"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Member_tags_5[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_Member_tag2el_5[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (3 << 2)), 0, 0, 0 } /* cup-of-coffee */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */

static asn_SEQUENCE_specifics_t asn_SPC_Member_specs_5 = {
	sizeof(struct Member),
	#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
	offsetof(struct Member, _asn_ctx),
	#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_MAP_Member_tag2el_5,
	1,	/* Count of tags in the map */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0, 0, 0,	/* Optional elements (not needed) */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	0,	/* Start extensions */
	2	/* Stop extensions */
};

static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_Member_5 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"SEQUENCE",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"SEQUENCE",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SEQUENCE,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SEQUENCE_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Member_tags_5,
	sizeof(asn_DEF_Member_tags_5)
		/sizeof(asn_DEF_Member_tags_5[0]), /* 1 */
	asn_DEF_Member_tags_5,	/* Same as above */
	sizeof(asn_DEF_Member_tags_5)
		/sizeof(asn_DEF_Member_tags_5[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Member_5,
	1,	/* Elements count */
	&asn_SPC_Member_specs_5	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_anything_4[] = {
	{ ATF_POINTER, 0, 0,
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (16 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_Member_5,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = ""
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_anything_tags_4[] = {
	(ASN_TAG_CLASS_CONTEXT | (2 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
static asn_SET_OF_specifics_t asn_SPC_anything_specs_4 = {
	sizeof(struct anything),
	offsetof(struct anything, _asn_ctx),
	#if (ASN_OP_MASK & ASN_OP_XER)
	0,	/* XER encoding is XMLDelimitedItemList */
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
};

static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_anything_4 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"anything",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"anything",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SET_OF,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SET_OF_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_anything_tags_4,
	sizeof(asn_DEF_anything_tags_4)
		/sizeof(asn_DEF_anything_tags_4[0]) - 1, /* 1 */
	asn_DEF_anything_tags_4,	/* Same as above */
	sizeof(asn_DEF_anything_tags_4)
		/sizeof(asn_DEF_anything_tags_4[0]), /* 2 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_anything_4,
	1,	/* Single element */
	&asn_SPC_anything_specs_4	/* Additional specs */
};


static asn_TYPE_member_t asn_MBR_other_9[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct other, choice.a),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_INTEGER,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "a"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_NOFLAGS, 0, offsetof(struct other, choice.b),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_CONTEXT | (3 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_INTEGER,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "b"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_other_tag2el_9[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* a */
    { (ASN_TAG_CLASS_CONTEXT | (3 << 2)), 1, 0, 0 } /* b */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */

static asn_CHOICE_specifics_t asn_SPC_other_specs_9 = {
	sizeof(struct other),
	offsetof(struct other, _asn_ctx),
	offsetof(struct other, present),
	sizeof(((struct other *)0)->present),
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_MAP_other_tag2el_9,
	2,	/* Count of tags in the map */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	.canonical_order = 0,
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	.ext_start = -1	/* Extensions start */
};

static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_other_9 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"other",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"other",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_CHOICE,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	CHOICE_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_other_9,
	2,	/* Elements count */
	&asn_SPC_other_specs_9	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_Stuff_1[] = {
	{ ATF_POINTER, 3, offsetof(struct Stuff, trees),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_trees_2,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "trees"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_POINTER, 2, offsetof(struct Stuff, anything),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_CONTEXT | (2 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_anything_4,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "anything"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_POINTER, 1, offsetof(struct Stuff, other),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = -1 /* Ambiguous tag (CHOICE?) */,
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_other_9,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "other"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Stuff_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_Stuff_tag2el_1[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 2, 0, 0 }, /* a */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 0, 0, 0 }, /* trees */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 1, 0, 0 }, /* anything */
    { (ASN_TAG_CLASS_CONTEXT | (3 << 2)), 2, 0, 0 } /* b */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */


#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_Stuff_tag2el_cxer_1[] = {
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 0, 0, 0 }, /* trees */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 1, 0, 0 }, /* anything */
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 2, 0, 0 } /* a */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */

static const uint8_t asn_MAP_Stuff_mmap_1[(3 + (8 * sizeof(unsigned int)) - 1) / 8] = {
	(0 << 7) | (0 << 6) | (0 << 5)
};

static 
asn_SET_specifics_t asn_SPC_Stuff_specs_1 = {
	sizeof(struct Stuff),
	offsetof(struct Stuff, _asn_ctx),
	offsetof(struct Stuff, _presence_map),
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_MAP_Stuff_tag2el_1,
	4,	/* Count of tags in the map */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	asn_MAP_Stuff_tag2el_cxer_1,
	3,	/* Count of tags in the CXER map */
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	1,	/* Whether extensible */
	(unsigned int *)asn_MAP_Stuff_mmap_1	/* Mandatory elements map */
};

asn_TYPE_descriptor_t asn_DEF_Stuff = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Stuff",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Stuff",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SET,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SET_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Stuff_tags_1,
	sizeof(asn_DEF_Stuff_tags_1)
		/sizeof(asn_DEF_Stuff_tags_1[0]), /* 1 */
	asn_DEF_Stuff_tags_1,	/* Same as above */
	sizeof(asn_DEF_Stuff_tags_1)
		/sizeof(asn_DEF_Stuff_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Stuff_1,
	3,	/* Elements count */
	&asn_SPC_Stuff_specs_1	/* Additional specs */
};

