
/*** <<< INCLUDES [Narrow] >>> ***/

#include <NativeInteger.h>
#include <constr_SEQUENCE.h>

/*** <<< TYPE-DECLS [Narrow] >>> ***/

typedef struct Narrow_15P0 {
	long	*narrow1	/* DEFAULT 3 */;
	long	 narrow2;
	long	*narrow3	/* OPTIONAL */;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Narrow_15P0_t;

/*** <<< FUNC-DECLS [Narrow] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Narrow_15P0;
extern asn_SEQUENCE_specifics_t asn_SPC_Narrow_15P0_specs_1;
extern asn_TYPE_member_t asn_MBR_Narrow_15P0_1[3];

/*** <<< CODE [Narrow] >>> ***/

#if (ASN_OP_MASK & ASN_OP_CHECK)
static int
memb_narrow1_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 1 && value <= 5)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
}

#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */


#if (ASN_OP_MASK & ASN_OP_CHECK)
static int
memb_narrow2_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 2 && value <= 5)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
}

#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */


#if (ASN_OP_MASK & ASN_OP_CHECK)
static int
memb_narrow3_constraint_1(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
	
	value = *(const long *)sptr;
	
	if((value >= 3 && value <= 5)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			TYPE_NAME(td),__FILE__, __LINE__);
		return -1;
	}
}

#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */



/*** <<< STAT-DEFS [Narrow] >>> ***/

static int asn_DFL_2_set_3(int set_value, void **sptr) {
	long *st = *sptr;
	
	if(!st) {
		if(!set_value) return -1;	/* Not a default value */
		st = (*sptr = CALLOC(1, sizeof(*st)));
		if(!st) return -1;
	}
	
	if(set_value) {
		/* Install default value 3 */
		*st = 3;
		return 0;
	} else {
		/* Test default value 3 */
		return (*st == 3);
	}
}
asn_TYPE_member_t asn_MBR_Narrow_15P0_1[] = {
	{ ATF_POINTER, 1, offsetof(struct Narrow_15P0, narrow1),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_NativeInteger,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = memb_narrow1_constraint_1,
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = asn_DFL_2_set_3,	/* DEFAULT 3 */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "narrow1"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Narrow_15P0, narrow2),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_NativeInteger,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = memb_narrow2_constraint_1,
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "narrow2"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_POINTER, 1, offsetof(struct Narrow_15P0, narrow3),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_NativeInteger,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = memb_narrow3_constraint_1,
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "narrow3"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Narrow_15P0_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_Narrow_15P0_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 0 }, /* narrow1 */
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 1, 0, 0 }, /* narrow2 */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 2, 0, 0 } /* narrow3 */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */

asn_SEQUENCE_specifics_t asn_SPC_Narrow_15P0_specs_1 = {
	sizeof(struct Narrow_15P0),
	#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
	offsetof(struct Narrow_15P0, _asn_ctx),
	#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_MAP_Narrow_15P0_tag2el_1,
	3,	/* Count of tags in the map */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0, 0, 0,	/* Optional elements (not needed) */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	-1,	/* Start extensions */
	-1	/* Stop extensions */
};

asn_TYPE_descriptor_t asn_DEF_Narrow_15P0 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Narrow",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Narrow",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SEQUENCE,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SEQUENCE_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Narrow_15P0_tags_1,
	sizeof(asn_DEF_Narrow_15P0_tags_1)
		/sizeof(asn_DEF_Narrow_15P0_tags_1[0]), /* 1 */
	asn_DEF_Narrow_15P0_tags_1,	/* Same as above */
	sizeof(asn_DEF_Narrow_15P0_tags_1)
		/sizeof(asn_DEF_Narrow_15P0_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Narrow_15P0_1,
	3,	/* Elements count */
	&asn_SPC_Narrow_15P0_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [NarrowInteger] >>> ***/

#include "Narrow.h"

/*** <<< TYPE-DECLS [NarrowInteger] >>> ***/

typedef Narrow_15P0_t	 NarrowInteger_t;

/*** <<< FUNC-DECLS [NarrowInteger] >>> ***/


extern asn_TYPE_descriptor_t asn_DEF_NarrowInteger;
asn_struct_free_f NarrowInteger_free;
#if (ASN_OP_MASK & ASN_OP_PRINT)
asn_struct_print_f NarrowInteger_print;
#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
#if (ASN_OP_MASK & ASN_OP_CHECK)
asn_constr_check_f NarrowInteger_constraint;
#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
#if (ASN_OP_MASK & ASN_OP_BER_DER)
ber_type_decoder_f NarrowInteger_decode_ber;
der_type_encoder_f NarrowInteger_encode_der;
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
#if (ASN_OP_MASK & ASN_OP_XER)
xer_type_decoder_f NarrowInteger_decode_xer;
xer_type_encoder_f NarrowInteger_encode_xer;
#endif /* (ASN_OP_MASK & ASN_OP_XER) */

/*** <<< CODE [NarrowInteger] >>> ***/

/*
 * This type is implemented using Narrow_15P0,
 * so here we adjust the DEF accordingly.
 */

/*** <<< STAT-DEFS [NarrowInteger] >>> ***/


#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_NarrowInteger_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

asn_TYPE_descriptor_t asn_DEF_NarrowInteger = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"NarrowInteger",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"NarrowInteger",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SEQUENCE,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SEQUENCE_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_NarrowInteger_tags_1,
	sizeof(asn_DEF_NarrowInteger_tags_1)
		/sizeof(asn_DEF_NarrowInteger_tags_1[0]), /* 1 */
	asn_DEF_NarrowInteger_tags_1,	/* Same as above */
	sizeof(asn_DEF_NarrowInteger_tags_1)
		/sizeof(asn_DEF_NarrowInteger_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Narrow_15P0_1,
	3,	/* Elements count */
	&asn_SPC_Narrow_15P0_specs_1	/* Additional specs */
};

