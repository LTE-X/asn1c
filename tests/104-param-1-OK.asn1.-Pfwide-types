
/*** <<< INCLUDES [Collection] >>> ***/

#include <REAL.h>
#include <asn_SET_OF.h>
#include <constr_SET_OF.h>
#include <IA5String.h>

/*** <<< TYPE-DECLS [Collection] >>> ***/

typedef struct Collection_16P0 {
	A_SET_OF(REAL_t) list;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Collection_16P0_t;
typedef struct Collection_16P1 {
	A_SET_OF(IA5String_t) list;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Collection_16P1_t;

/*** <<< FUNC-DECLS [Collection] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Collection_16P0;
extern asn_SET_OF_specifics_t asn_SPC_Collection_16P0_specs_1;
extern asn_TYPE_member_t asn_MBR_Collection_16P0_1[1];
extern asn_TYPE_descriptor_t asn_DEF_Collection_16P1;
extern asn_SET_OF_specifics_t asn_SPC_Collection_16P1_specs_3;
extern asn_TYPE_member_t asn_MBR_Collection_16P1_3[1];

/*** <<< STAT-DEFS [Collection] >>> ***/

asn_TYPE_member_t asn_MBR_Collection_16P0_1[] = {
	{ ATF_POINTER, 0, 0,
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (9 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_REAL,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = ""
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Collection_16P0_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
asn_SET_OF_specifics_t asn_SPC_Collection_16P0_specs_1 = {
	sizeof(struct Collection_16P0),
	offsetof(struct Collection_16P0, _asn_ctx),
	#if (ASN_OP_MASK & ASN_OP_XER)
	0,	/* XER encoding is XMLDelimitedItemList */
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
};

asn_TYPE_descriptor_t asn_DEF_Collection_16P0 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Collection",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Collection",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SET_OF,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SET_OF_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Collection_16P0_tags_1,
	sizeof(asn_DEF_Collection_16P0_tags_1)
		/sizeof(asn_DEF_Collection_16P0_tags_1[0]), /* 1 */
	asn_DEF_Collection_16P0_tags_1,	/* Same as above */
	sizeof(asn_DEF_Collection_16P0_tags_1)
		/sizeof(asn_DEF_Collection_16P0_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Collection_16P0_1,
	1,	/* Single element */
	&asn_SPC_Collection_16P0_specs_1	/* Additional specs */
};

asn_TYPE_member_t asn_MBR_Collection_16P1_3[] = {
	{ ATF_POINTER, 0, 0,
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (22 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_IA5String,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = ""
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Collection_16P1_tags_3[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
asn_SET_OF_specifics_t asn_SPC_Collection_16P1_specs_3 = {
	sizeof(struct Collection_16P1),
	offsetof(struct Collection_16P1, _asn_ctx),
	#if (ASN_OP_MASK & ASN_OP_XER)
	0,	/* XER encoding is XMLDelimitedItemList */
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
};

asn_TYPE_descriptor_t asn_DEF_Collection_16P1 = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Collection",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Collection",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SET_OF,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SET_OF_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Collection_16P1_tags_3,
	sizeof(asn_DEF_Collection_16P1_tags_3)
		/sizeof(asn_DEF_Collection_16P1_tags_3[0]), /* 1 */
	asn_DEF_Collection_16P1_tags_3,	/* Same as above */
	sizeof(asn_DEF_Collection_16P1_tags_3)
		/sizeof(asn_DEF_Collection_16P1_tags_3[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Collection_16P1_3,
	1,	/* Single element */
	&asn_SPC_Collection_16P1_specs_3	/* Additional specs */
};


/*** <<< INCLUDES [Bunch] >>> ***/

#include "Collection.h"
#include <constr_SEQUENCE.h>

/*** <<< TYPE-DECLS [Bunch] >>> ***/

typedef struct Bunch {
	Collection_16P0_t	 field_REAL;
	Collection_16P1_t	 field_IA5String;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Bunch_t;

/*** <<< FUNC-DECLS [Bunch] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Bunch;

/*** <<< STAT-DEFS [Bunch] >>> ***/

static asn_TYPE_member_t asn_MBR_Bunch_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Bunch, field_REAL),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_Collection_16P0,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "field-REAL"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Bunch, field_IA5String),
		#if (ASN_OP_MASK & ASN_OP_BER_DER)
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)),
		.tag_mode = 0,
		#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
		.type = &asn_DEF_Collection_16P1,
		#if (ASN_OP_MASK & ASN_OP_CHECK)
		.memb_constraints = 0,	/* Defer constraints checking to the member type */
		#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
		#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
		.per_constraints = 0,	/* PER is not compiled, use -gen-PER */
		.default_value = 0,	/* No default value */
		#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
		#if (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER))
		.name = "field-IA5String"
		#endif /* (ASN_OP_MASK & (ASN_OP_PRINT | ASN_OP_XER)) */
		},
};

#if (ASN_OP_MASK & ASN_OP_BER_DER)
static const ber_tlv_tag_t asn_DEF_Bunch_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */

#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
static const asn_TYPE_tag2member_t asn_MAP_Bunch_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)), 0, 0, 1 }, /* field-REAL */
    { (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)), 1, -1, 0 } /* field-IA5String */
};
#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */

static asn_SEQUENCE_specifics_t asn_SPC_Bunch_specs_1 = {
	sizeof(struct Bunch),
	#if (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER))
	offsetof(struct Bunch, _asn_ctx),
	#endif /* (ASN_OP_MASK & (ASN_OP_BER_DER | ASN_OP_XER)) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_MAP_Bunch_tag2el_1,
	2,	/* Count of tags in the map */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0, 0, 0,	/* Optional elements (not needed) */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	-1,	/* Start extensions */
	-1	/* Stop extensions */
};

asn_TYPE_descriptor_t asn_DEF_Bunch = {
	#if (ASN_OP_MASK & ASN_OP_PRINT)
	"Bunch",
	#endif /* (ASN_OP_MASK & ASN_OP_PRINT) */
	#if (ASN_OP_MASK & ASN_OP_XER)
	"Bunch",
	#endif /* (ASN_OP_MASK & ASN_OP_XER) */
	&asn_OP_SEQUENCE,
	#if (ASN_OP_MASK & ASN_OP_CHECK)
	SEQUENCE_constraint,
	#endif /* (ASN_OP_MASK & ASN_OP_CHECK) */
	#if (ASN_OP_MASK & ASN_OP_BER_DER)
	asn_DEF_Bunch_tags_1,
	sizeof(asn_DEF_Bunch_tags_1)
		/sizeof(asn_DEF_Bunch_tags_1[0]), /* 1 */
	asn_DEF_Bunch_tags_1,	/* Same as above */
	sizeof(asn_DEF_Bunch_tags_1)
		/sizeof(asn_DEF_Bunch_tags_1[0]), /* 1 */
	#endif /* (ASN_OP_MASK & ASN_OP_BER_DER) */
	#if (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER))
	0,	/* No PER visible constraints */
	#endif /* (ASN_OP_MASK & (ASN_OP_UPER | ASN_OP_APER)) */
	asn_MBR_Bunch_1,
	2,	/* Elements count */
	&asn_SPC_Bunch_specs_1	/* Additional specs */
};

